<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>utilidades on Ruben Perea</title>
    <link>https://perea7r.github.io/CodingSnacks/tags/utilidades/</link>
    <description>Recent content in utilidades on Ruben Perea</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <lastBuildDate>Mon, 11 Dec 2023 17:06:29 +0100</lastBuildDate><atom:link href="https://perea7r.github.io/CodingSnacks/tags/utilidades/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Principios SOLID</title>
      <link>https://perea7r.github.io/CodingSnacks/posts/december23/11-12-2023/</link>
      <pubDate>Mon, 11 Dec 2023 17:06:29 +0100</pubDate>
      
      <guid>https://perea7r.github.io/CodingSnacks/posts/december23/11-12-2023/</guid>
      <description>El objetivo de la arquitectura de software es mnimizar los recursos humanos necesarios para construir y mantener un sistema.
Single Responsability. Open-Closed Principle. Liskov Substitution Principle. Interface Segregation Principle. Dependency Inversion Principle. Estos principios nos ayudarán a:
Crear software escalable. Crear una arquitectura limpia y mantenible. Escribir código más fácil de leer y entendible. Módulos con alta cohesión y bajo acoplamiento. 1. Single Responsability Principle Un módulo debe tener una única razón para cambiar, es decir, que solo debe ser responsable de un usuario, de ninguno más.</description>
    </item>
    
    <item>
      <title>Lenguaje ubicuo</title>
      <link>https://perea7r.github.io/CodingSnacks/posts/november23/13-11-2023/</link>
      <pubDate>Mon, 13 Nov 2023 11:45:09 +0100</pubDate>
      
      <guid>https://perea7r.github.io/CodingSnacks/posts/november23/13-11-2023/</guid>
      <description>Es un vocabulario común que describe el dominio del problema utilizado por todas las personas implicadas en el proyecto para evitar malentendidos.
Se crea a partir de sesiones de brainstorming y análisis de dominio. Debe ser documentado y actualizado durante todo el transcurso del proyecto debe ser claro y sobre todo lo menos ambiguo posible.
El lenguaje ubicuo evoluciona según vamos aprendiendo más sobre el dominio.
Debe ser utilizado siempre, en todas las conversaciones.</description>
    </item>
    
  </channel>
</rss>
