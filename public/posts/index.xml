<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Ruben Perea</title>
    <link>https://perea7r.github.io/CodingSnacks/posts/</link>
    <description>Recent content in Posts on Ruben Perea</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <lastBuildDate>Tue, 28 Nov 2023 08:45:37 +0100</lastBuildDate><atom:link href="https://perea7r.github.io/CodingSnacks/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Técnicas de definición de casos de prueba</title>
      <link>https://perea7r.github.io/CodingSnacks/posts/november23/28-11-2023/</link>
      <pubDate>Tue, 28 Nov 2023 08:45:37 +0100</pubDate>
      
      <guid>https://perea7r.github.io/CodingSnacks/posts/november23/28-11-2023/</guid>
      <description>Partición de equivalencias Los datos de entrada de un programa se pueden agrupar en clases diferentes en las que todos los miembros de dicha clase están relacionados. Cada una de estas clases es una partición de equivalencia en la que el programa se comporta de la misma forma para cada miembro de la clase. Esto nos permite reducir así el número total de casos de prueba que hay que desarrollar. Consta de dos pasos:</description>
    </item>
    
    <item>
      <title>Buenas prácticas de trabajo en Git</title>
      <link>https://perea7r.github.io/CodingSnacks/posts/november23/20-11-2023/</link>
      <pubDate>Mon, 20 Nov 2023 08:53:55 +0100</pubDate>
      
      <guid>https://perea7r.github.io/CodingSnacks/posts/november23/20-11-2023/</guid>
      <description>Realizar commits atómicos El enfoque atómico supone lo siguiente. Confirmar (commitear) cada modificación o tarea como un cambio separado. Confirmar solo cuando se complete un bloque de trabajo. Confirmar cada cambio de diseño por separado, con confirmación conjunta para: archivos de diseño, código subyacente y recursos adicionales. Beneficios del enfoque atómico
Es fácil de revertir un commit sin afectar a otros cambios. Es fácil hacer otros cambios sobre la marcha.</description>
    </item>
    
    <item>
      <title>Lenguaje ubicuo</title>
      <link>https://perea7r.github.io/CodingSnacks/posts/november23/13-11-2023/</link>
      <pubDate>Mon, 13 Nov 2023 11:45:09 +0100</pubDate>
      
      <guid>https://perea7r.github.io/CodingSnacks/posts/november23/13-11-2023/</guid>
      <description>Es un vocabulario común que describe el dominio del problema utilizado por todas las personas implicadas en el proyecto para evitar malentendidos.
Se crea a partir de sesiones de brainstorming y análisis de dominio. Debe ser documentado y actualizado durante todo el transcurso del proyecto debe ser claro y sobre todo lo menos ambiguo posible.
El lenguaje ubicuo evoluciona según vamos aprendiendo más sobre el dominio.
Debe ser utilizado siempre, en todas las conversaciones.</description>
    </item>
    
    <item>
      <title>Domain Driven Design (DDD)</title>
      <link>https://perea7r.github.io/CodingSnacks/posts/november23/10-11-2023/</link>
      <pubDate>Fri, 10 Nov 2023 11:34:02 +0100</pubDate>
      
      <guid>https://perea7r.github.io/CodingSnacks/posts/november23/10-11-2023/</guid>
      <description>Empezaremos por ver las diferencias entre una arquitectura centrada en datos y otra en el dominio.
Arquitectura centrada en los datos ❌ Se piensa primero en los datos que se necesitan almacenar. Se recopilan requisitos para tener claras las reglas de negocio. Diseño del modelo de datos. Diseñamos y construimos nuestro sistema para trabajar con los datos. Como consecuencia, tenemos una arquitectura de software totalmente dependiente de los datos. Arquitectura centrada en el dominio ✅ Se piensa en el dominio del problema (lógica central es decir enfocarnos en todas las cosas importantes relacionada con el área del problema que queremos tratar) no en los datos que se necesitan almacenar.</description>
    </item>
    
    <item>
      <title>¿Qué es Apache Kafka?</title>
      <link>https://perea7r.github.io/CodingSnacks/posts/november23/09-11-2023/</link>
      <pubDate>Thu, 09 Nov 2023 09:27:57 +0100</pubDate>
      
      <guid>https://perea7r.github.io/CodingSnacks/posts/november23/09-11-2023/</guid>
      <description>Es una plataforma streaming distribuida que permite a los desarrolladores enviar y recibir mensajes de manera eficiente y confiable a través de aplicaciones. Es escalable, tolerante a fallos y de alto rendimiento lo que lo hace ideal para aplicaciones en tiempo real y procesamiento de datos en grandes volúmenes.
Sin Kafka Con Kafka Características Permite publicar y subscribirse a flujos de datos (streams) de manera distribuida. Almacena flujos de datos de manera persistente y tolerante a fallos.</description>
    </item>
    
  </channel>
</rss>
