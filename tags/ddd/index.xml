<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DDD on Ruben Perea</title>
    <link>https://perea7r.github.io/CodingSnacks/tags/ddd/</link>
    <description>Recent content in DDD on Ruben Perea</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <lastBuildDate>Fri, 10 Nov 2023 11:34:02 +0100</lastBuildDate><atom:link href="https://perea7r.github.io/CodingSnacks/tags/ddd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Domain Driven Design (DDD)</title>
      <link>https://perea7r.github.io/CodingSnacks/posts/november23/10-11-2023/</link>
      <pubDate>Fri, 10 Nov 2023 11:34:02 +0100</pubDate>
      
      <guid>https://perea7r.github.io/CodingSnacks/posts/november23/10-11-2023/</guid>
      <description>Empezaremos por ver las diferencias entre una arquitectura centrada en datos y otra en el dominio.
Arquitectura centrada en los datos ❌ Se piensa primero en los datos que se necesitan almacenar. Se recopilan requisitos para tener claras las reglas de negocio. Diseño del modelo de datos. Diseñamos y construimos nuestro sistema para trabajar con los datos. Como consecuencia, tenemos una arquitectura de software totalmente dependiente de los datos. Arquitectura centrada en el dominio ✅ Se piensa en el dominio del problema (lógica central es decir enfocarnos en todas las cosas importantes relacionada con el área del problema que queremos tratar) no en los datos que se necesitan almacenar.</description>
    </item>
    
  </channel>
</rss>
